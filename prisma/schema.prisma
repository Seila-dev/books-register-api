generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          String              @id @default(uuid())
  title       String
  coverImage  String?
  description String?
  rating      Int?                @default(0)
  isFavorite  Boolean             @default(false)
  startDate   DateTime?
  finishDate  DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  user        User                @relation(fields: [userId], references: [id])
  userId      Int
  categories  CategoriesOnBooks[]
  Note        Note[]
}

model Note {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id        String              @id @default(uuid())
  name      String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  user      User                @relation(fields: [userId], references: [id])
  userId    Int
  books     CategoriesOnBooks[]

  @@unique([name, userId])
}

model CategoriesOnBooks {
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId     String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  assignedAt DateTime @default(now())

  @@id([bookId, categoryId])
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  username     String
  passwordHash String     @map("password_hash")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  books        Book[]
  categories   Category[]
  Note         Note[]

  @@map("users")
}
